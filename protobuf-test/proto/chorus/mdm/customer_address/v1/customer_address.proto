syntax = "proto3";

package chorus.mdm.customer_address.v1;

// The customer address information.
message CustomerAddress {
  // The customer_country_code is the country code of Customer. cust_cnt_cd in OPUS
  string customer_country_code = 1;
  // The customer_sequence is the sequence of Customer. cust_seq in OPUS
  int32 customer_sequence = 2;
  // The business_entity_name is the business entity name of Customer. bzet_nm in OPUS
  string business_entity_name = 3;
  // The business_entity_address is the business entity address of Customer. bzet_addr in OPUS
  string business_entity_address = 4;
  // The state_code is the state code of Customer. ste_cd in OPUS
  string state_code = 5;
  // The zip_code is the zip code of Customer. zip_cd in OPUS
  string zip_code = 6;
}

// The customer address code information.
message CustomerAddressCode {
  // The customer country code
  string customer_country_code = 1;
  // The customer sequence
  int32 customer_sequence = 2;
  // The primary check flag
  string primary_check_flag = 3;
}

// Request message for `CustomerAddressInfoService.GetCustomerAddressesByCustomerAddressCodes`.
message GetCustomerAddressesByCustomerAddressCodesRequest {
  // The customer address code list
  repeated CustomerAddressCode customer_address_code_list = 1;
}

// Response message for `CustomerAddressInfoService.GetCustomerAddressesByCustomerAddressCodes`.
message GetCustomerAddressesByCustomerAddressCodesResponse {
  // The customer address information
  CustomerAddress customer_address = 1;
}

// Request message for `CustomerAddressInfoService.SearchCustomerAddressesByBusinessEntityName`.
message SearchCustomerAddressesByBusinessEntityNameRequest {
  // The customer business entity name information
  string business_entity_name = 1;
}

// Response message for `CustomerAddressInfoService.SearchCustomerAddressesByBusinessEntityName`.
message SearchCustomerAddressesByBusinessEntityNameResponse {
  // The customer address information
  CustomerAddress customer_address = 1;
}

// The service that implements the CustomerAddressInfoService definition.
service CustomerAddressInfoService {
  // Get list of customer addresses by customer country codes and sequences and primary
  // check flags.
  //
  // Operation: MATCH
  //
  // Request:
  //  {
  //    "customer_address_code_list": [
  //      {
  //        "customer_country_code": "KR",
  //        "customer_sequence": "514567",
  //        "primary_check_flag": "Y"
  //      }
  //    ]
  //  }
  //
  // Response:
  //  {
  //    "customer_address": {
  //      "customer_country_code": "KR",
  //      "customer_sequence": "514567",
  //      "business_entity_name": "NEXUS SEA & AIR CO.,LTD",
  //      "business_entity_address": "17, 141BEONGIL, DAECHEONG-RO, JUNG-GU, BUSAN KOREA",
  //      "state_code": "",
  //      "zip_code": ""
  //    }
  //  }
  // ...
  rpc GetCustomerAddressesByCustomerAddressCodes(GetCustomerAddressesByCustomerAddressCodesRequest) returns (stream GetCustomerAddressesByCustomerAddressCodesResponse);

  // Search list of customer addresses by business entity name
  //
  // Operation: LIKE
  //
  // Request:
  //  {
  //    "business_entity_name": "NEXUS SEA & AIR"
  //  }
  //
  // Response:
  //  {
  //    "customer_address": {
  //      "customer_country_code": "KR",
  //      "customer_sequence": "514567",
  //      "business_entity_name": "NEXUS SEA & AIR CO.,LTD",
  //      "business_entity_address": "17, 141BEONGIL, DAECHEONG-RO, JUNG-GU, BUSAN KOREA",
  //      "state_code": "",
  //      "zip_code": ""
  //    }
  //  }
  // ...
  rpc SearchCustomerAddressesByBusinessEntityName(SearchCustomerAddressesByBusinessEntityNameRequest) returns (stream SearchCustomerAddressesByBusinessEntityNameResponse);
}
